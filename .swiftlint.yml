disabled_rules:
  - nesting # If this can be configured in the future to a depth of 2 then remove this
  - computed_accessors_order # Re-instate this if Mock Generator fixes order of accessors

opt_in_rules: # some rules are only opt-in
  - empty_count
  # - missing_docs
  # - force_unwrapping
  # Find all the available rules by running:
  # swiftlint rules
# included: # paths to include during linting. `--path` is ignored if present.
# #   - Source
excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Carthage
  - Pods
  - HMRCNextGenConsumer/Modules/Vendor/ExAstro
  - build/derived_data
  - fastlane/derived_data
  - Templates
  - BuildTools
  - SubModules
#   - Source/ExcludedFolder
#   - Source/ExcludedFile.swift

# configurable rules can be customized from this configuration file
# binary rules can set their severity level

# force_cast: warning # implicitly
# force_try:
#   severity: warning # explicitly
# # rules that have both warning and error levels, can set just the warning level
# # implicitly
# # line_length: 110
# # they can set both implicitly with an array
#

warning_threshold: 2

line_length:
  warning: 145
  ignores_comments: true

function_body_length:
  warning: 50
  error: 70
type_body_length:
  - 300 # warning
  - 500 # error
# or they can set both explicitly
file_length:
  warning: 1000
  error: 1500
type_name:
  max_length: 50
identifier_name:
  min_length: # only min_length
    error: 3 # only error
  max_length: # warning and error
    warning: 50
    error: 60
  excluded: # excluded via string array
    - id
    - URL
    - url
    - obj
    - key
    - all
    - tag
    - lhs
    - rhs
large_tuple: 4
reporter: "xcode" # reporter type (xcode, json, csv, checkstyle)
function_parameter_count: 7

custom_rules:
  long_inits:
    included: ".*\\.swift"
    name: "Long Inits"
    regex: "(?<!super|self|\\s)\\.init\\("
    message: "Long inits are pointless, yo"
    severity: error
